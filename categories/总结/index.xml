<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>总结 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/categories/%E6%80%BB%E7%BB%93/</link>
    <description>Recent content in 总结 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-cn</language>
    <lastBuildDate>Wed, 01 Jul 2020 11:31:33 +0800</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/categories/%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dp总结</title>
      <link>https://haofish.github.io/2020/dp%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 01 Jul 2020 11:31:33 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/dp%E6%80%BB%E7%BB%93/</guid>
      <description>1. 写在前面的话  之前写了一篇不像总结的动态规划总结，感觉更像是一个成长历程，所以就打算重写一篇。  2. 对DP简单的总结   dp的题目特点
 求最大或者最小值（如背包：价值最大、凑硬币：数量最少……） 计数（如：爬楼梯：计算上到n台阶的方法数） 求存在性或者胜负（如：能否胜利……）    dp的使用条件
 拥有子问题 子问题最优解（即拥有最优子结构），对于一个主问题解最优，其子问题必定也是最优 问题结果依赖子问题，即问题的最优解依赖于其子问题的最优解 子问题不（或极少）重叠,即解决了暴力方法的重复计算和冗余问题 无后效性，即此时的之前状态无法直接影响未来的决策，换句话说就是之前的每个状态如何得来并不影响未来对此时（当前）状态的利用或者查找，因为我们最后对此时（当前）状态的利用只考虑结果不考虑过程。    dp的思考方式及注意事项
 若问题有dp的味道，应当优先从主问题出发来思考，即从末尾（结果）开始思考（例如爬楼梯问题） 接下来，对于一个主问题，应当思考此问题的结果由什么得来（由什么决定）和有什么因素影响 或者思考此问题类似什么DP题（如:背包、LIS……） 实在想不出可以思考如果是用bfs（或普通递归），应当如何解决问题（个人觉得有时候道理是相同的，记得吗：递归 + 记忆化 = 递推） 注意1：在思考一个状态的得来时，目光应当只集中在此时的状态（无后效性），而不要多想之前的状态变化和未来的状态影响 注意2：状态的定义很重要，要结合题目需求和状态影响因素来定义    关于dp三步走
 1.状态定义 → 2.列状态转移方程 → 3.验证方程 对于第一步和第二步主要可以利用上述的思考方式或者是闫氏DP分析法来解决 第三步虽然不难，但是很重要，因为第三步包括：验证状态推理是否合理或者是否是答案最优，并且思考状态是否满足题目条件需求，前者均没问题后再思考边界是什么。对于一般验证发现有问题通常的解决办法有：1、修改状态定义；2、给状态增加维度；3、优化转移方程    3. 几个重要的模型  例题静待补充
 4. 分类 5. 优化dp的手段 ① 二进制优化 ② 单调队列优化 ③ 斜率优化 ④ 四边形不等式优化 未完待续（以后有空补充）……</description>
    </item>
    
  </channel>
</rss>