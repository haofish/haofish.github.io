<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>紫书刷题录-ch8 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/categories/%E7%B4%AB%E4%B9%A6%E5%88%B7%E9%A2%98%E5%BD%95-ch8/</link>
    <description>Recent content in 紫书刷题录-ch8 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Aug 2020 15:50:53 +0800</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/categories/%E7%B4%AB%E4%B9%A6%E5%88%B7%E9%A2%98%E5%BD%95-ch8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UVA1149</title>
      <link>https://haofish.github.io/2020/uva1149/</link>
      <pubDate>Tue, 18 Aug 2020 15:50:53 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1149/</guid>
      <description>Bin Packing  题意：给你n个物品，每个物品的重量为$w_i$，你有容量为w的背包，每个背包最多只能装两件物品，问你最少要多少背包来装 贪心就好了，贪心策略：将物品按重量排序，如果最重和最轻的物品一起不超过w就放一起，然后就让次重和次轻的放一起；否则重的单独放在一个背包，然后让次重的背包和最轻的一起，以此循环 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int M = 1e5 + 5; int n, w, wi[M]; int main () { #ifndef ONLINE_JUDGE  freopen(&amp;#34;D:/MYCODE/vsCode-c/test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;D:/MYCODE/vsCode-c/test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  int t; scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); while (t--) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;w); for (int i = 0; i &amp;lt; n; i++) scanf(&amp;#34;%d&amp;#34;, wi + i); sort(wi, wi + n); int l = 0, r = n - 1, ans = 0; while (l &amp;lt;= r) { if (wi[l] + wi[r] &amp;lt;= w) l++, r--; else r--; ans++; } if (t) printf(&amp;#34;%d\n\n&amp;#34;, ans); else printf(&amp;#34;%d\n&amp;#34;, ans); } return 0; } </description>
    </item>
    
    <item>
      <title>UVA11572</title>
      <link>https://haofish.github.io/2020/uva11572/</link>
      <pubDate>Tue, 18 Aug 2020 11:57:07 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva11572/</guid>
      <description>Unique Snowflakes  题意：给你一个长度为$n(n \le 1000000)$的数组，问你最长有不重复数字的连续子序列有多长 用set和map的速度都差不多，set记录是否重复，map记录当前数字在此之前最近出现的位置，如果没有就是-1 如果嫌set和map慢的话直接用unordered_set或者unordered_map 这里用了上次偶遇了一种很牛逼很简洁的hash方式后就喜欢上这个hash，跑进了100ms 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int M = 1e6 + 10, H = 0xfffff; int n, arr[M], last[M]; struct Hash{ int real[H + 5], val[H + 5]; void clear() { memset(val, -1, sizeof val); }//初始化-1  int&amp;amp; operator[] (const int &amp;amp;k) { int i = k &amp;amp; H; while (real[i] != k &amp;amp;&amp;amp; ~val[i]) i = (i + 1) &amp;amp; H; real[i] = k; return val[i]; } }h; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;D:/MYCODE/vsCode-c/test.</description>
    </item>
    
    <item>
      <title>UVA11054</title>
      <link>https://haofish.github.io/2020/uva11054/</link>
      <pubDate>Tue, 18 Aug 2020 10:55:44 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva11054/</guid>
      <description>Wine trading in Gergovia  题意：有n个村庄，每个村庄都有对酒的需求，正数代表要送出多少酒，负数代表需要多少酒，把k单位的酒运到相邻的村庄要k单位的体力，让你计算最小需要的体力 对于第一个村庄，他的需求量x无论正负，都需要右边的村庄搬过来或者搬过去右边的村庄，然后把多余的需求继承到下一个村庄，和紫书上讲的思想差不多 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;cmath&amp;gt; using namespace std; using ll = long long; const int M = 1e5 + 10; int n; ll arr[M], ans; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;D:/MYCODE/vsCode-c/test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;D:/MYCODE/vsCode-c/test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  while (scanf(&amp;#34;%d&amp;#34;, &amp;amp;n), n) { ans = 0; for (int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%lld&amp;#34;, arr + i); } for (int i = 0; i &amp;lt; n - 1; i++) { ans += abs(arr[i]), arr[i + 1] += arr[i]; } printf(&amp;#34;%lld\n&amp;#34;, ans); memset(arr, 0, sizeof arr); } return 0; } </description>
    </item>
    
    <item>
      <title>UVA1152</title>
      <link>https://haofish.github.io/2020/uva1152/</link>
      <pubDate>Mon, 17 Aug 2020 19:54:27 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1152/</guid>
      <description>4 Values whose Sum is 0  题意：给你4个长度为$n(n \le 4000)$的集合，让你在4个集合里分别取a、b、c、d，使得$a + b + c + d = 0$，问你有多少种取法 按紫书说的“中途相遇法”，从象个不同的方向来解决问题，最终“汇集”在一起 用哈希记录$a + b$，然后再计算$-c - d$的哈希个数就好了，用slt提供的unordered_map足够过这题了，跑了6000ms多，a掉了 后来看了一位大佬自己写的hash，跑了一下，平均650ms，一个很快的哈希表 原理大概和线性探查法差不多，不过这里用的不是取余（取余很慢），这里用的位运算里的与运算，保证了数值在给定的哈希范围内 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int M = 4e3 + 10, H = 0x7fffff; int n, arr[5][M]; struct Hash{ int real[H + 5], val[H + 5] void clear() { memset(val, 0, sizeof val); } int&amp;amp; operator[] (const int&amp;amp; num) { int i = num &amp;amp; H; while (val[i] &amp;amp;&amp;amp; real[i] !</description>
    </item>
    
    <item>
      <title>UVA1605</title>
      <link>https://haofish.github.io/2020/uva1605/</link>
      <pubDate>Mon, 17 Aug 2020 11:43:31 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1605/</guid>
      <description>Building for UN  题意：有一栋楼，有$n(n \le 50)$个国家要开会，每个国家至少分配一个位置，让你输出一种方案，H层，每层W行L列，使得任意两个国家要能相邻，层数也算相邻 按紫书说的构造一种解出来，只需要两层就好了，每层$n \times n$的格子，第一层第i行是第i个国家,第二层第j列是第j个国家， 这个模型有点像放筷子，有n双筷子，分别都有左和右，要想让每个左筷子都能接触到其他右筷子的方案就是在第一层筷子横着放，第二层竖着放就行了 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std; int n; char str[55]; void solve() { printf(&amp;#34;%d %d %d\n&amp;#34;, 2, n, n); for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) printf(&amp;#34;%c&amp;#34;, str[i]); puts(&amp;#34;&amp;#34;); } puts(&amp;#34;&amp;#34;); for (int i = 0; i &amp;lt; n; i++) { for (int j = 0; j &amp;lt; n; j++) printf(&amp;#34;%c&amp;#34;, str[j]); puts(&amp;#34;&amp;#34;); } } int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;D:/MYCODE/vsCode-c/test.</description>
    </item>
    
    <item>
      <title>UVA120</title>
      <link>https://haofish.github.io/2020/uva120/</link>
      <pubDate>Mon, 17 Aug 2020 11:16:52 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva120/</guid>
      <description>Stacks of Flapjacks  题意：给你一个序列，每次选一个数k，从序列的后往前数第k个数然后把它及它之前时数都翻转一下，问你一种选法使得序列从小到大排好序 有点像选择排序，不过为了不影响后面的，应该先把排好最大的数，如果已经就位就排第二大的数，具体策略是先把它调到最前面再调到相应的正确位置，一直排到有序为止 代码如下  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt; using namespace std; int cnt, arr[50], tmp[50]; char line[150]; void solve() { memcpy(tmp, arr, sizeof(int) * cnt); sort(tmp, tmp + cnt); int indx = cnt - 1; for (int i = cnt - 1; i &amp;gt;= 0; i--) { if (tmp[indx] == arr[i]) { indx--; } else { int nums = i, k = cnt - i; while (arr[nums] !</description>
    </item>
    
  </channel>
</rss>