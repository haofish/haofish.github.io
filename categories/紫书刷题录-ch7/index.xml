<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>紫书刷题录-ch7 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/categories/%E7%B4%AB%E4%B9%A6%E5%88%B7%E9%A2%98%E5%BD%95-ch7/</link>
    <description>Recent content in 紫书刷题录-ch7 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Aug 2020 12:22:46 +0800</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/categories/%E7%B4%AB%E4%B9%A6%E5%88%B7%E9%A2%98%E5%BD%95-ch7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UVA690</title>
      <link>https://haofish.github.io/2020/uva690/</link>
      <pubDate>Fri, 14 Aug 2020 12:22:46 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva690/</guid>
      <description>Pipeline Scheduling  历经千辛万苦终于a了这题 题意：一台电脑有5个工作单元(unit0 ~ unit4)，有10(0 ~ 9)个程序需要完成，每个程序都要在n$(n &amp;lt; 20&amp;gt;)$的时间片完成，在同一时间里，一个单元只能执行一个程序，开始执行后就要严格按顺序执行完，问你最小的完成10个程序的时间是多少 从读题到思考到ac用了近两天，下面我将会从运行时间慢到运行时间快，tle到ac开始阐释解决这题时的坎坷 首先是这题怎么dfs  一开始想的时候想到了一个最笨的方法：根据时间一步一步地dfs下去，但这样的话绝对不行，因为如果n = 19,最多会递归190层，就算考虑剪枝，如果答案就是上百的，那也受不了 想了很久终于想到一个办法就是根据程序来递归，即递归（0 ~ 9）这样的话最多也就9层 用一个二维的bool数组run[i][j]来储存状态，代表第i个工作单元在j时间时的运行情况，false代表是空闲的，true代表是正在工作 对于一开始第一个程序即程序0肯定就是从0时刻时开始运行是最优的，所以dfs从程序1开始 对于第$k$个程序来说，如果开始的时间是$s$，则它结束的时间一定是$s + n$，则第$k + 1$个程序可以在$s + 1$到$s + n + 1$之间（包括端点）的时间里开始运行 到这里dfs的运行方式就很明朗了，只需要暴力枚举每个$s + 1$到$s + n + 1$的位置开始运行下一个程序就行了 那么剪枝呢？这个dfs的方法直接对比先前算好最小完成时间的和当前程序的结束时间做对比来剪   上述的方法是会tle的，先别急，一步一步走到ac这个开头不能少 上述dfs方法的代码  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int n, Min; char unit[6][25]; bool run[5][500]; bool check(int s) { for (int i = 0; i &amp;lt; n; i++) for (int j = 0; j &amp;lt; 5; j++) if (unit[j][i] == &amp;#39;X&amp;#39; &amp;amp;&amp;amp; run[j][i + s]) return false; return true; } void dfs(int num, int s) { if (s + n &amp;gt;= Min) return; if (num == 10) { Min = s + n; return; } for (int i = s + 1; i &amp;lt;= s + n; i++) { if (!</description>
    </item>
    
    <item>
      <title>UVA211</title>
      <link>https://haofish.github.io/2020/uva211/</link>
      <pubDate>Thu, 13 Aug 2020 14:46:51 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva211/</guid>
      <description>The Domino Effect  题意：一个多米诺骨牌有两个面，一共有28个不同的多米诺骨牌，放在那，可能横着，可能竖着，这样就形成了一个$7 \times 8$的一个数字图，问你所有可能的摆放方式 dfs就好了，一开始没想到怎么dfs，绞尽脑汁，一开始一格一格来，失败，后来采用每一行都用一个二进制状态来描述是横还是竖，还是失败了，最后看了下题解，豁然开朗 也是dfs，但是不能再单纯地一格一格得dfs，要一行一行来，不然可能会像我一开始那样，会遗漏很多格子没递归到，所以要一行一行来，方式就是每行一格一格地递归，递归到最后一列的才换行（代码24行处），最终将28个牌都遍历一遍才能输出 至于骨牌号码的储存方式，考虑到数据小，所以用了压缩来储存起骨牌的号码 代码如下  #include &amp;lt;cstring&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int domi[10][10], id[400], ans[10][10], nums = 0, kase = 0; bool vis[30]; const int dr[] = {1, 0}, dc[] = {0, 1}; inline int ID(int a, int b) { return (min(a, b) &amp;lt;&amp;lt; 6) | max(a, b); } inline bool check(int r, int c) { return r &amp;lt; 7 &amp;amp;&amp;amp; c &amp;lt; 8; } void init(){ memset(ans, 0, sizeof ans); memset(vis, 0, sizeof vis); nums = 0; } void dfs(int r, int c, int num) { if (num == 28) { nums++; for (int i = 0; i &amp;lt; 7; i++) { for (int j = 0; j &amp;lt; 8; j++) { printf(&amp;#34;%4d&amp;#34;, ans[i][j]); } puts(&amp;#34;&amp;#34;); } puts(&amp;#34;\n&amp;#34;); return; } if (c == 8) r++, c = 0; if (ans[r][c]) { dfs(r, c + 1, num); return; } for (int i = 0; i &amp;lt; 2; i++) { int newr = r + dr[i], newc = c + dc[i]; int x = ID(domi[r][c], domi[newr][newc]), res = id[x]; if (!</description>
    </item>
    
    <item>
      <title>UVA225</title>
      <link>https://haofish.github.io/2020/uva225/</link>
      <pubDate>Wed, 12 Aug 2020 15:54:08 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva225/</guid>
      <description>Golygons  题意：一个网格图，现在给你图中$k(k \le 50)$个障碍的坐标（坐标可能为负），不能继续上次的方向继续走也不能后退，这就意味着只能左右走，第$i$次走$i$个单位，从(0, 0)点出发，走了$n(n \le 20)$次恰好回到(0, 0)点，让你输出所有可能的路线，按字典序输出 因为深度已知，所以我才用了DFS的方法，考虑到坐标可能有负数，所以我把坐标原点移动了一下，将(1000, 1000)记为原点，其余点也一样有同样变化，因为 $n \le 20$， 所以1000够用 将答案用vector&amp;lt;char&amp;gt;的一维数组存起来，因为vector里面自带字典序的排序，所以最后可以直接sort(ans, ans + num)排序（详细看代码），当然用vector&amp;lt;string&amp;gt;来存，这样就不用再而外加多一维数组了，string也有push_back()（用append()也可以）和pop_back()函数，这样最后的排序就必须是sort(ans.begin(), ans.end()); 一个方案中一个坐标不能被访问两次，用个vis的布尔数组来记录是否被访问过 dfs两次，因为最开始是4个方向都可以走的 最后记得回溯 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; const int M = 1e3; int t, k, bn, num; bool isb[M + M][M + M], vis[M + M][M + M]; const char dir[] = &amp;#34;ewns&amp;#34;; const int dx[] = {1, -1, 0, 0}; const int dy[] = {0, 0, 1, -1}; vector&amp;lt;char&amp;gt; ans[1000], tmp; void init() { num = 0; memset(isb, 0, sizeof isb); memset(vis, 0, sizeof vis); for (auto &amp;amp;i : ans) i.</description>
    </item>
    
    <item>
      <title>UVA208</title>
      <link>https://haofish.github.io/2020/uva208/</link>
      <pubDate>Wed, 12 Aug 2020 10:24:20 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva208/</guid>
      <description>Firetruck  题意：给你一个无向图，让你求出从1号节点到n号节点的所有路径，按顺序输出，具体看样例 DFS和BFS都可以，这里我用了DFS，利用了一个ans的vector数组来储存答案，根据题目要求，优先递归节点权值小的 注意：要先判断1号节点能否到达n号节点，不然会tle，这里我用了一个类似于并查集的思想来判断是否能到达n号节点 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;queue&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; using vi = vector&amp;lt;int&amp;gt;; int t, cnt, Kase = 0, nums, fa[25]; bool vis[25], f, num[25], v[25]; vi nodes[25], ans; void init() { cnt = 0, nums = 0; for (auto &amp;amp;i : nodes) i.clear(); ans.clear(); ans.push_back(1); memset(num, 0, sizeof num); memset(vis, 0, sizeof vis); memset(v, 0, sizeof v); vis[1] = true; for (int i = 1; i &amp;lt; 25; i++) fa[i] = i; } void DFS(int n) { if (n == t) { cnt++, f = true; for (auto i : ans) { if (f) f = !</description>
    </item>
    
    <item>
      <title>UVA11212</title>
      <link>https://haofish.github.io/2020/uva11212/</link>
      <pubDate>Tue, 11 Aug 2020 10:02:22 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva11212/</guid>
      <description>Editing a Book  题意：给你一个排列，你一次能够剪切一段字串，然后在别的地方插入粘贴，让你求最少的剪切粘贴次数使得排列是1~n按顺序的 IDA*的题，每次规定递归的层数，长度为n的排列最多是剪切粘贴n - 1次 剪枝精髓：移动一次最多改变 3 个数字的后继数字，例如从{a，b，c，d}到{a, c, b, d},只有a, c, b（字母均代表区间）三个区间最后一个数的后继改变了 假设当前递归到d层，还有h个数字的后继不正确（最后一个数字的评判依据是是否是最后一个数，即$n - 1$），的最少还要遍历 $d + h / 3$ 层，当前设置了最大层数为Max, 则当 $d + h / 3 &amp;gt; Max$ 即 $3 \times d + h &amp;gt; 3 \times Max$ 就剪枝 代码如下，跑了300ms  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; int n, arr[15], tmp[15], kase = 0; bool check() { for (int i = 0; i &amp;lt; n; i++) { if (arr[i] !</description>
    </item>
    
    <item>
      <title>UVA10603</title>
      <link>https://haofish.github.io/2020/uva10603/</link>
      <pubDate>Sun, 09 Aug 2020 20:37:14 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva10603/</guid>
      <description>Fill  题意：给你3个没有刻度的杯子，每个杯子的都有自己的容量，现利用这三个杯子量出体积为d的水，现在问最少的倒水量，如果量不到d，就量和d想接近的d&amp;rsquo; 按照书中的说法这是一个隐式图，求最短路，最短路的评判标志是倒水量  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;queue&amp;gt; using namespace std; const int M = 210; int cap[3], d, ans[M]; bool vis[M][M]; struct nodes{ int v[3], d; nodes(){} nodes(int v0, int v1, int v2, int d) :d(d) { v[0] = v0, v[1] = v1, v[2] = v2; } bool operator &amp;lt; (const nodes&amp;amp; tmp) const { return d &amp;gt; tmp.d; } }; void init() { memset(ans, -1, sizeof ans); memset(vis, 0, sizeof vis); } void update(nodes &amp;amp;u) { for (int i = 0; i &amp;lt; 3; i++) { if (ans[u.</description>
    </item>
    
    <item>
      <title>UVA1354</title>
      <link>https://haofish.github.io/2020/uva1354/</link>
      <pubDate>Sun, 09 Aug 2020 15:45:24 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1354/</guid>
      <description>Mobile Computing  题意：有一个房间，有长为1的木棍，用天平的方式放一些物品，让你求出不超过房间的宽度的最长宽度的，如果误解输出-1 做了两天，习得了两种dfs非枚举子集的办法（到时再回头研究刘神方法），只选择了一种学习，当然另一种也看了 自底向上枚举二叉树，思想有点像哈夫曼建树，选择两个节点来合并，然后就是递归回溯的事 dfs(n) ：代表还剩下 n 个节点可以拼接 w[i] ：代表第 i 个节点的重量，w[i] = 0 则表示该节点已经被用了 l[i]、r[i] ：代表第 i 节点的左右宽度的最大值 值得注意的是在求 l[i] 和 r[i] 时同时要考虑当前另一个节点，例如在计算 l[i] 时，不仅要考虑 左子树的左最大宽度 + 当前节点的左宽度，还要考虑 右子树的左最大宽度 - 当前节点的右宽度，前者很好理解，关键是后者：因为有可能右子树的左最大宽度会超过左子树 具体看图，右子树同理   显然橙色节点的距离超过了黄色节点 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; using vi = vector&amp;lt;int&amp;gt;; double d, Max, l[10], r[10]; int n, cnt, k = 0; vi w; void dfs(int num) { if (num == 1) { for (int i = 0; i &amp;lt; n; i++) { if (!</description>
    </item>
    
    <item>
      <title>UVA140</title>
      <link>https://haofish.github.io/2020/uva140/</link>
      <pubDate>Fri, 07 Aug 2020 19:53:14 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva140/</guid>
      <description>Bandwidth  题意：给你一个无向图，让你输出一种序列使得每个节点到该节点在图中相连的节点的最远距离的最小值，直接看题目比较好懂 dfs遍历所有可能的序列，然后求出一个最小值，我的代码用了邻接表 剪枝的话一种是利用计算好最小带宽的一种来剪枝，第二种就是计算未确定位置的节点的最小带宽来剪 按照紫书的指导，剪了两种枝，但是感觉剪一种的速度差不多，两者交上去都是$0ms$，毕竟节点不多，剪一种枝就行了 以下代码是剪了两种枝的，如果只剪一种，只要把28，60，62注释就行了  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; char str[200]; bool ext[26], ok[26][26]; int head[26], n, indx[26], vis[26], mind, con[26]; struct es{ int to, next; es(int to = 0, int next = -1) : to (to), next(next) {} }; vector&amp;lt;es&amp;gt; e; vector&amp;lt;char&amp;gt; node, res, ans; void add_edge(int u, int v) { e.push_back(es(v, head[u])); head[u] = e.size() - 1, con[u]++; if (!ext[u]) node.push_back(u + &amp;#39;A&amp;#39;); ext[u] = true; } bool check(int cur, int u) { if (!</description>
    </item>
    
    <item>
      <title>UVA129</title>
      <link>https://haofish.github.io/2020/uva129/</link>
      <pubDate>Fri, 07 Aug 2020 11:57:39 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva129/</guid>
      <description>Krypton Factor  定义一个串是容易串：有相邻的相同的字串；反之就是困难串 让你求只利用前k个大写字母的第n个困难串 dfs模拟一下，值得注意的是剪枝时只看当前串的后缀即可，例如遍历到ABCDEFGH时，就只判断H和G、GH和EF、FGH和CDE、EFGH和ABCD就行了 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt; using namespace std; int n, L, num = 0; bool ok = true; char ans[100], a[50], b[50]; bool check(int len) { if (!len) return false; for (int i = 1; i + i &amp;lt;= len + 1; i++) { memcpy(a, &amp;amp;ans[len - i + 1], sizeof(char) * i); memcpy(b, &amp;amp;ans[len - i - i + 1], sizeof(char) * i); a[i] = &amp;#39;\0&amp;#39;, b[i] = &amp;#39;\0&amp;#39;; if (strcmp(a, b) == 0) return true; } return false; } void dfs(int cur) { if (num &amp;gt; n) return; if (num == n) { size_t len = strlen(ans), s = 0, l = 0; for (size_t i = 0; i &amp;lt; len; i++) { if (s++ == 4) { if (l !</description>
    </item>
    
    <item>
      <title>UVA524</title>
      <link>https://haofish.github.io/2020/uva524/</link>
      <pubDate>Thu, 06 Aug 2020 20:32:38 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva524/</guid>
      <description>Prime Ring Problem  题意：给你一个数n，让你求出所有素数环，素数环：利用 1 ~ n来排列组合成的一个环，相邻的两个数的和必须都是素数 直接dfs遍历所有排列，途中要剪枝，如果当前放的数和前面的数的和不是素数就直接剪了 画出解答树更好懂 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt; using namespace std; int kase = 0, n, arr[30]; bool isp[] = {0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0}; bool vis[30]; void dfs(int cur, int *A) { if (cur == n - 1) { if (!</description>
    </item>
    
    <item>
      <title>UVA10976</title>
      <link>https://haofish.github.io/2020/uva10976/</link>
      <pubDate>Thu, 06 Aug 2020 18:27:25 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva10976/</guid>
      <description>Fractions Again?!  给你一个k,让你求所有 $1 / k = 1 / x + 1/ y$ 的答案 $x \ge y$ 计算可以发现 y 最大不会超过2k,最小是k + 1  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; using ll = long long; ll n; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  while (~scanf(&amp;#34;%lld&amp;#34;, &amp;amp;n)) { vector&amp;lt;ll&amp;gt; a, b; for (ll i = n + 1; i &amp;lt;= n + n; i++) { if (n * i % (i - n) == 0) { a.</description>
    </item>
    
    <item>
      <title>UVA11059</title>
      <link>https://haofish.github.io/2020/uva11059/</link>
      <pubDate>Thu, 06 Aug 2020 17:34:18 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva11059/</guid>
      <description>Maximum Product  给你一个数组，让你求子字串的最大乘积，如果没有就输出0 暴力解就好了  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; using ll = long long; int n, kase = 0; int main () { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  while(~scanf(&amp;#34;%d&amp;#34;, &amp;amp;n)) { ll Max = 0; vector&amp;lt;ll&amp;gt; arr(n); for (auto &amp;amp;x : arr) scanf(&amp;#34;%lld&amp;#34;, &amp;amp;x); for (int i = 0; i &amp;lt; n; i++) { ll tmp = arr[i]; Max = max(Max, tmp); for (int j = i + 1; j &amp;lt; n; j++) { tmp *= arr[j]; Max = max(Max, tmp); } } printf(&amp;#34;Case #%d: The maximum product is %lld.</description>
    </item>
    
    <item>
      <title>UVA725</title>
      <link>https://haofish.github.io/2020/uva725/</link>
      <pubDate>Thu, 06 Aug 2020 16:25:28 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva725/</guid>
      <description>Division  题意：给你一个数n，让你求出 $abcde / fghij = n$ 的所有结果，a ~ j 的恰好是 0 ~ 9 的数 暴力遍历分子就好了，然后检查分母是否合法就行了  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int M = 1e5; int n; bool check(int a, int b) { bool num[10] = {0}; if (b &amp;lt; 10000) num[0] = true; while (a || b) { num[a % 10] = true; num[b % 10] = true; a /= 10, b /= 10; } int x = 0; for (auto i : num) if (i) x++; return x == 10; } bool check(int a) { bool num[10] = {0}; if (a &amp;lt; 10000) num[0] = true; while (a) { num[a % 10] = true; a /= 10; } int x = 0; for (auto i : num) if (i) x++; return x == 5; } int main () { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.</description>
    </item>
    
  </channel>
</rss>