<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>贪心 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/tags/%E8%B4%AA%E5%BF%83/</link>
    <description>Recent content in 贪心 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 18 Aug 2020 15:50:53 +0800</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/tags/%E8%B4%AA%E5%BF%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UVA1149</title>
      <link>https://haofish.github.io/2020/uva1149/</link>
      <pubDate>Tue, 18 Aug 2020 15:50:53 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1149/</guid>
      <description>Bin Packing  题意：给你n个物品，每个物品的重量为$w_i$，你有容量为w的背包，每个背包最多只能装两件物品，问你最少要多少背包来装 贪心就好了，贪心策略：将物品按重量排序，如果最重和最轻的物品一起不超过w就放一起，然后就让次重和次轻的放一起；否则重的单独放在一个背包，然后让次重的背包和最轻的一起，以此循环 代码如下  #include &amp;lt;cstdio&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;algorithm&amp;gt; using namespace std; const int M = 1e5 + 5; int n, w, wi[M]; int main () { #ifndef ONLINE_JUDGE  freopen(&amp;#34;D:/MYCODE/vsCode-c/test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;D:/MYCODE/vsCode-c/test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  int t; scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); while (t--) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;w); for (int i = 0; i &amp;lt; n; i++) scanf(&amp;#34;%d&amp;#34;, wi + i); sort(wi, wi + n); int l = 0, r = n - 1, ans = 0; while (l &amp;lt;= r) { if (wi[l] + wi[r] &amp;lt;= w) l++, r--; else r--; ans++; } if (t) printf(&amp;#34;%d\n\n&amp;#34;, ans); else printf(&amp;#34;%d\n&amp;#34;, ans); } return 0; } </description>
    </item>
    
    <item>
      <title>贪心刷题总结</title>
      <link>https://haofish.github.io/2020/%E8%B4%AA%E5%BF%83%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 25 Jul 2020 19:08:51 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/%E8%B4%AA%E5%BF%83%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>前言 总结 普通贪心 Bin Packing 区间贪心 未完待续……  前言  终于开始刷贪心了，感觉cf很多题都喜欢出贪心，所以决定也练练 贪心貌似也有挺系统的分类和一些经典例题，把这些刷了应该就有提升了把  总结  贪心是指将问题通过当前最优解来求解得到最终的最优解，即局部最优解可以推出总体最优解。 给我的感觉就是一种思维题，通过一定技巧把题目旁敲侧击地解决了，但是如果没接触过或者想不出来，基本就很难了，但是贪心的代码实现并不长，所以说贪心即使很基础的算法也是很难的算法。 总得来说贪心算法难就难在每道题的贪心策略都不同，是否能贪心也很难看出来。 一般在解决贪心题的时候可以把他放到生活中的例子来，想想如果是生活中碰到这题，你会怎么解决让自己最舒服。  普通贪心   【例题】
  HDU 2111 Saving HDU
 题意：你有可以装k个宝贝容量的包，现在给你一些宝贝，每个宝贝价值p，有m个，问你最多可以装多少价值的宝贝 思路：将价值排序，先选大的，选到v = 0为止 代码如下  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstdio&amp;gt;#include &amp;lt;utility&amp;gt;#include &amp;lt;vector&amp;gt; using namespace std; int n, v; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  while (scanf(&amp;#34;%d&amp;#34;, &amp;amp;v), v) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q; for (int i = 0; i &amp;lt; n; i++) { int p, m; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;p, &amp;amp;m); q.</description>
    </item>
    
    <item>
      <title>Olympiad</title>
      <link>https://haofish.github.io/2020/olympiad/</link>
      <pubDate>Fri, 24 Jul 2020 19:25:00 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/olympiad/</guid>
      <description>传送门  题意：给你两个同长数组代表n个人两场比赛的成绩，再给你一个x，某两个数组的和$a_i + b_j \ge x$，问你两数组组合成满足式子的排名最高和最低是多少。具体看样例就懂了。 思路：此题对于最高排名一定是1，即第一名，而最低排名的话，一开始知道是一个双指针的贪心，但是就是不知道怎么贪，后来看到大佬的想法豁然开朗：只要找到组合后大于等于x的个数有多少就好了。 具体找法：一个数组a大到小排序，一个数组b小到大排序，然后只要从a从头开始一个一个遍历，从b数组中从头找能与a数组的数加起来大于等于x的数就好了，然后记录个数，就是答案 心得：贪心题目是难想，想到之后就很简单，代码量也不大，还有一个比较考验的就是模拟的功力了（从人的思维去想想如果这不是一道编程题，而是一个生活的益智题，你会怎么做？然后再用代码实现,说的简单，感觉还是要多刷题） 代码如下  #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstdio&amp;gt; using namespace std; const int M = 1e5 + 5; int n, x, a[M], b[M]; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;x); for (int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%d&amp;#34;, a + i); } for (int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%d&amp;#34;, b + i); } printf(&amp;#34;1 &amp;#34;); sort(a, a + n); sort(b, b + n); reverse(a, a + n); //a从大到小排序  int j = 0, ans = 0; for (int i = 0; i &amp;lt; n; i++) { while (j &amp;lt; n &amp;amp;&amp;amp; b[j] + a[i] &amp;lt; x) { j++; } if (j &amp;gt;= n) break; ans++; j++; } printf(&amp;#34;%d&amp;#34;, ans); return 0; } </description>
    </item>
    
    <item>
      <title>E1. Reading Books (easy version)题解</title>
      <link>https://haofish.github.io/2020/653div3probleme1/</link>
      <pubDate>Mon, 06 Jul 2020 18:00:01 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/653div3probleme1/</guid>
      <description>传送门
题意  小A和小B要读书，现在共又 n 本书，对于每本书都有三个参数，$t_i$：阅读的时间、$a_i$：小A喜欢读的书、$b_i$：小B喜欢读的书 现在小A和小B都要读 k 本书，但是他俩只读自己喜欢的书 问你小A和小B最少要读多久可以读到 k 本书，（对于都喜欢的书，时间是可以只算一次的） 如果他俩有一个没读到 k 本书就输出 -1  思路  一道思维贪心题cf好狠呀，网上有很多的解法，大多数都是模拟+贪心，但是我看到了一位大佬的贪心思路，醍醐灌顶，下面就用它的思路了 对于每个书本可以分为以下四类  小A和小B都喜欢的书 只有小A喜欢的书 只有小B喜欢的书 他俩都不喜欢的书   显然最后一类可以不管不要呀，看书长知识，目前只考虑第二三类的书，可以分别用数组$a_n$和$b_n$记录这些书的阅读时间，然后从小到大排序，精彩的来了，把$a_i 和 b_i$合成一本书当作是第一类的书（妙呀,我怎么没想到，太笨了，太菜了，刷题少），然后放入第一类，再来对第一类的书的阅读时间排序，选前 k 个书，记录阅读时间就是最终答案 代码如下  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef vector&amp;lt;int&amp;gt; vi; typedef vector&amp;lt;long long&amp;gt; vll; typedef pair&amp;lt;int, int&amp;gt; pii; typedef pair&amp;lt;long long, long long&amp;gt; pll; #define debug printf(&amp;#34;(hao)&amp;#34;) #define all(x) x.begin(), x.end() #define rep(i, a, b) for (int i = (a); i &amp;lt; (b); i++) #define clr(a, v) memset(a, v, sizeof(a))  const int M = 2e5 + 10; vi a, b, t; void solve() { int n, k; scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;k); rep(i, 0, n) { int _t, _a, _b; scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;_t, &amp;amp;_a, &amp;amp;_b); if (_a &amp;amp;&amp;amp; _b) t.</description>
    </item>
    
    <item>
      <title>C. Move Brackets题解</title>
      <link>https://haofish.github.io/2020/653div3problemc/</link>
      <pubDate>Mon, 06 Jul 2020 15:59:43 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/653div3problemc/</guid>
      <description>传送门
题意  给你一串字符串，只有&amp;rdquo;(&amp;rdquo; h和&amp;rdquo;)&amp;ldquo;组成，你每次都能选择一个字符把它移到最左边或者最右边，问你最少移动几次可以使得字符串的括号合法  思路  一道贪心题（比赛的时候没看出来，太菜了😭） 只要计算出合法的括号对，然后用总长度减去合法的括号对的个数，即剩余的不合法长度除以 2 就是最少的步数 例如 ： &amp;ldquo;()))))((((()&amp;rdquo;, 去掉合法的后就是&amp;rdquo;))))((((&amp;rdquo;, 那么移动的长度就是$8 \div 2 = 4$就是答案 这题我一开始想复杂了，对于上一个样例，我以为必须要把下标为2 ~ 5（从0开始）的先一道最左边，再把（原本的）6 ~ 9移到最左边，变成这样：&amp;quot;(((())))()()&amp;quot;,总次数是8，所以就很搞了，然而正确答案是把6 ~ 9 移到最左边就合法了，就是这样：&amp;quot;((((()))))()&amp;quot;,总次数就是 4 所以最终的思路就是判断合法的有多少对：在博客中遇到了两种方法，一种是用栈，一种是不用栈（根据括号合法的特性一定要左括号先出现， 即从头到尾遍历，用一个变量来储存左括号出现次数，一旦遇到右括号变量值就自减） 代码如下（用栈）：  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; typedef long long ll; typedef vector&amp;lt;int&amp;gt; vi; #define debug printf(&amp;#34;(hao)&amp;#34;) #define all(x) x.begin(), x.end() #define rep(i, a, b) for (int i = (a); i &amp;lt; (b); i++) #define clr(a, v) memset(a, v, sizeof(a))  void solve() { int n; char bra[55]; stack&amp;lt;char&amp;gt; res; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); scanf(&amp;#34;%s&amp;#34;, bra); for (int i = 0; i &amp;lt; n; i++) { if (res.</description>
    </item>
    
  </channel>
</rss>