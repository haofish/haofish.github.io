<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/tags/%E5%9B%BE/</link>
    <description>Recent content in 图 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Aug 2020 14:26:40 +0800</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/tags/%E5%9B%BE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UVA804</title>
      <link>https://haofish.github.io/2020/uva804/</link>
      <pubDate>Tue, 04 Aug 2020 14:26:40 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva804/</guid>
      <description>Petri Net Simulation  每个T变迁都有限制，必须是指定的P库有足够的token才行（注意，T指定的P库不一定只有一个），直接模拟就好了  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int p[110], np, nt, kase = 0; struct T { int in[110], out[110]; T() { memset(in, 0, sizeof in); memset(out, 0, sizeof out); } }; int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  for (; scanf(&amp;#34;%d&amp;#34;, &amp;amp;np), np;) { for (int i = 1; i &amp;lt;= np; i++) { scanf(&amp;#34;%d&amp;#34;, p + i); } scanf(&amp;#34;%d&amp;#34;, &amp;amp;nt); int x; T ts[110]; for (int i = 1; i &amp;lt;= nt; i++) { for (; scanf(&amp;#34;%d&amp;#34;, &amp;amp;x), x;) { if (x &amp;lt; 0) ts[i].</description>
    </item>
    
    <item>
      <title>UVA1600</title>
      <link>https://haofish.github.io/2020/uva1600/</link>
      <pubDate>Mon, 03 Aug 2020 16:26:13 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva1600/</guid>
      <description>Patrol Robot  BFS进阶题 题意：有个移动的机器人，从（1， 1）点出发，目标是（m， n）点，0为可以通过的点，1为障碍点，机器人一次最多只能穿越k障碍，问你最少要走多少步到达终点 BFS走，要注意个是要记录到达障碍点的最短穿越障碍个数  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int n, m, g[25][25], t, k; const int dx[] = {-1, 0, 1, 0}; const int dy[] = {0, -1, 0, 1}; inline bool check(int x, int y) { return x &amp;gt;= 1 &amp;amp;&amp;amp; y &amp;gt;= 1 &amp;amp;&amp;amp; x &amp;lt;= n &amp;amp;&amp;amp; y &amp;lt;= m; } struct coo{ int x, y, d, k; coo(){} coo(int x, int y, int d, int k) : x(x), y(y), d(d), k(k){} }; void bfs() { queue&amp;lt;coo&amp;gt; q; bool vis[25][25][25] = {0}; vis[1][1][0] = g[1][1] == 1; q.</description>
    </item>
    
    <item>
      <title>UVA439</title>
      <link>https://haofish.github.io/2020/uva439/</link>
      <pubDate>Sun, 02 Aug 2020 16:15:00 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva439/</guid>
      <description>Knight Moves  题意：在象棋里，给马的起点和终点，计算最小移动步数  #include &amp;lt;bits/stdc++.h&amp;gt;#define mk(a, b) make_pair(a, b) using namespace std; using pii = pair&amp;lt;int, int&amp;gt;; using pdi = pair&amp;lt;pii, int&amp;gt;; int sx, sy, ex, ey; bool vis[10][10]; char a[5], b[5]; const int dx[] = {-2, -1, 1, 2, 2, 1, -1, -2}; const int dy[] = {-1, -2, -2, -1, 1, 2, 2, 1}; inline bool cherk(int x, int y) { return x &amp;gt; 0 &amp;amp;&amp;amp; y &amp;gt; 0 &amp;amp;&amp;amp; x &amp;lt; 9 &amp;amp;&amp;amp; y &amp;lt; 9; } void print(int num) { printf(&amp;#34;To get from %s to %s takes %d knight moves.</description>
    </item>
    
    <item>
      <title>UVA816</title>
      <link>https://haofish.github.io/2020/uva816/</link>
      <pubDate>Sat, 01 Aug 2020 15:56:21 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva816/</guid>
      <description>Abbott&amp;rsquo;s Revenge  题意：给你起点和终点，每个点面向不同的方向有不用的指定方向，问你从起点到终点最短路 BFS就好，但是要注意的是每个点都有不用的方向，所以要多加一维来保存这些方向，即每个点相当于是4个点 一道值得学习深究的一题  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const char dis[] = &amp;#34;NESW&amp;#34;, go[] = &amp;#34;RLF&amp;#34;; const int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, 1, 0, -1 }; int sx, sy, rx, ry, ex, ey, rd, d[15][15][4]; bool ok[15][15][4][3]; inline int get_dis(char c) { return strchr(dis, c) - dis; } inline int get_go(char c) { return strchr(go, c) - go; } inline bool cherk(int x, int y) { return x &amp;gt; 0 &amp;amp;&amp;amp; x &amp;lt;= 9 &amp;amp;&amp;amp; y &amp;gt; 0 &amp;amp;&amp;amp; y &amp;lt;= 9; } struct nodes{ int x, y, d; nodes(int x = 0, int y = 0, int d = 0) : x(x), y(y), d(d) {} }pre[15][15][4]; nodes work(nodes &amp;amp;node, int i) { int dr = node.</description>
    </item>
    
    <item>
      <title>UVA10305</title>
      <link>https://haofish.github.io/2020/uva10305/</link>
      <pubDate>Sat, 01 Aug 2020 09:47:35 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva10305/</guid>
      <description>Ordering Tasks  题意：给你一堆未知数的大小关系，让你输出可能的总体大小关系 简化了拓扑排序，只因根据题中的意思了解到一定是DAG  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; const int M = 110; int m, n, vis[M]; bool g[M][M]; vector&amp;lt;int&amp;gt; ans; void dfs(int u) { vis[u] = true; for (int i = 1; i &amp;lt;= m; i++) { if (!vis[i] &amp;amp;&amp;amp; g[u][i]) { dfs(i); } } ans.push_back(u); } int main() { #ifndef ONLINE_JUDGE  freopen(&amp;#34;test.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;test.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); #endif  while (scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;m, &amp;amp;n), m + n) { int x, y; for (int i = 0; i &amp;lt; n; i++) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;x, &amp;amp;y); g[x][y] = true; } for (int i = 1; i &amp;lt;= m; i++) { if (vis[i]) continue; dfs(i); } reverse(ans.</description>
    </item>
    
    <item>
      <title>UVA572</title>
      <link>https://haofish.github.io/2020/uva572/</link>
      <pubDate>Fri, 31 Jul 2020 20:13:07 +0800</pubDate>
      
      <guid>https://haofish.github.io/2020/uva572/</guid>
      <description>Oil Deposits  给你一个矩形图，让你求连通的“@”块，一个连通的定义是该点的八个方向都是连通的，dfs就行了  #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int m, n, cont[110][110]; char g[110][110]; void dfs(int x, int y, int num) { if (x &amp;lt; 0 || y &amp;lt; 0 || x &amp;gt;= m || y &amp;gt;= n || cont[x][y] || g[x][y] != &amp;#39;@&amp;#39;) return; cont[x][y] = num; for (int i = -1; i &amp;lt;= 1; i++) { for (int j = -1; j &amp;lt;= 1; j++) { if (i !</description>
    </item>
    
  </channel>
</rss>