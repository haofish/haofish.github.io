<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>动态规划 on 🐟🐟🐟&lt;--</title>
    <link>https://haofish.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
    <description>Recent content in 动态规划 on 🐟🐟🐟&lt;--</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-cn</language>
    <lastBuildDate>Sat, 27 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://haofish.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>动态规划刷题总结</title>
      <link>https://haofish.github.io/2020/dynamicprogramming/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://haofish.github.io/2020/dynamicprogramming/</guid>
      <description>1、写在前面 这几天疯狂刷leetcode的dp题，刷到我都想吐了，看到一个题就先往dp想，感觉中毒不浅，话不多说，赶紧开始总结一下我的成长历程心得。
2、我对dp的看法和理解   首先引入《算法笔记》里的一句话:
 动态规划是一种非常精妙的算法思想，他没有固定的写法、极其灵活，常常需要具体问题具体分析。
 没错正式这种具体问题具体分析的设定让我刷到吐了
  平时在思考动态规划的往往是利用一个小小的公式：递推 = 递归 + 记忆化（下面会赘述我是怎么利用这个公式思考的）
  虽然他是这么说，但是我还是觉得dp的是有套路可循的，例如给dp分类 （背包dp、树形dp、区间dp……），经典题的记忆 （爬楼梯、树塔问题、LIS……）
  一般来说，我思考dp都是从结果往前想的（即从末尾开始想）
  dp的基本使用条件： 1. 拥有重叠子问题、 2. 最优子结构
  dp思考三步走： 1. 状态定义 → 2.列状态转移方程 → 验证方程
  我觉得的动规成长路线：小白 → 利用小公式辅助建立dp → 正常dp三步走思维思考 → 大佬 （我还没触及 将来一定达到( ఠൠఠ )ﾉ）
  3、典型例题 ①爬楼梯（leetcode #70） 题意  假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。示例 1： 输入： 2 输出： 2 解释： 有两种方法可以爬到楼顶。 1.</description>
    </item>
    
  </channel>
</rss>